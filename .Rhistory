obesity$family_history_with_overweight
ggplot(obesity, aes_string(x=obesity$family_history_with_overweight,fill=obesity$NObeyesdad)) +
geom_bar(position="fill") +
scale_fill_brewer(palette="Set2") +
labs(fill="Obesity Level",title="Relationship between Family History and obesity",x="Family History with Overweight", y="Obesity Levels") +
#   scale_x_discrete(labels=c("1"="Never","2"="Sometimes","3"="Always")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
obesity$FAVC
ggplot(obesity, aes_string(x=obesity$FAVC,fill=obesity$NObeyesdad)) +
geom_bar(position="fill") +
scale_fill_brewer(palette="Set2") +
labs(fill="Obesity Level",title="Relationship between eating high caloric food and obesity",x="Eating High Caloric Food Frequently", y="Obesity Levels") +
#   scale_x_discrete(labels=c("1"="Never","2"="Sometimes","3"="Always")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
obesity$CAEC
ggplot(obesity, aes_string(x=obesity$CAEC,fill=obesity$NObeyesdad)) +
geom_bar(position="fill") +
scale_fill_brewer(palette="Set2") +
labs(fill="Obesity Level",title="Relationship between eating food between meals and obesity",x="Eating Food between meals", y="Obesity Levels") +
#   scale_x_discrete(labels=c("1"="Never","2"="Sometimes","3"="Always")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
obesity$SCC
ggplot(obesity, aes_string(x=obesity$CAEC,fill=obesity$NObeyesdad)) +
geom_bar(position="fill") +
scale_fill_brewer(palette="Set2") +
labs(fill="Obesity Level",title="Relationship between monitoring calories and obesity",x="Monitoring calories", y="Obesity Levels") +
#   scale_x_discrete(labels=c("1"="Never","2"="Sometimes","3"="Always")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(obesity, aes_string(x=obesity$SCC,fill=obesity$NObeyesdad)) +
geom_bar(position="fill") +
scale_fill_brewer(palette="Set2") +
labs(fill="Obesity Level",title="Relationship between monitoring calories and obesity",x="Monitoring calories", y="Obesity Levels") +
#   scale_x_discrete(labels=c("1"="Never","2"="Sometimes","3"="Always")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
final_data=subset(obesity, select = c(Gender,Age,Height, family_history_with_overweight, FAF,MTRANS,FAVC,CAEC, NCP,NObeyesdad))
#splitting into train and test
final_data$random_var <- runif(nrow(final_data))  # Generate a random variable
train <- final_data[final_data$random_var <= 0.8, ]  # 80% for training
test <- final_data[final_data$random_var > 0.8, ]   # 20% for testing
final_data=subset(obesity, select = c(Gender,Age,Height, family_history_with_overweight, FAF,MTRANS,FAVC,CAEC, NCP,NObeyesdad))
#splitting into train and test
final_data$random_var <- runif(nrow(final_data))  # Generate a random variable
train <- final_data[final_data$random_var <= 0.8, ]  # 80% for training
test <- final_data[final_data$random_var > 0.8, ]   # 20% for testing
train<-subset(train,select=-c(random_var))
test<-subset(test,select=-c(random_var))
rf1<-randomForest(NObeyesdad~.,train,importance=TRUE)
importance(rf1)
varImpPlot(rf1,sort=TRUE, main="Importance of feature variables in random forest", pch=16)
p1<-rf1$predicted
confusionMatrix(p1,train$NObeyesdad)
p2<-predict(rf1,test)
confusionMatrix(p2,test$NObeyesdad)
gbm_obesity<-gbm(NObeyesdad~., data=train_pred,distribution="multinomial",n.trees = 5000,
interaction.depth = 5,
shrinkage = 0.1,
cv.folds = 10,  # 10-fold cross-validation
verbose = FALSE)
gbm_obesity<-gbm(NObeyesdad~., data=train,distribution="multinomial",n.trees = 5000,
interaction.depth = 5,
shrinkage = 0.1,
cv.folds = 10,  # 10-fold cross-validation
verbose = FALSE)
perf_gbm1=gbm.perf(gbm_obesity, method="cv")
summary(gbm_obesity,plotit=TRUE)
title ('Influence of different features in boosting method')
pred_probs <- predict(gbm_obesity, newdata = train, n.trees = perf_gbm1, type = "response")
pred_class <- apply(pred_probs, 1, function(x) colnames(pred_probs)[which.max(x)])
pred_class <- factor(pred_class, levels = levels(train$NObeyesdad))
true_class <- factor(train$NObeyesdad)
confusionMatrix(pred_class,true_class)
pred_probs_test<-predict(gbm_obesity,newdata=test,n.trees=perf_gbm1, type="response")
pred_class_test<-apply(pred_probs_test,1,function(x) colnames(pred_probs_test)[which.max(x)])
pred_class_test<-factor(pred_class_test, levels=levels(test$NObeyesdad))
true_class_test<-factor(test$NObeyesdad)
confusionMatrix(pred_class_test,true_class_test)
#final_data=subset(obesity, select = c(Gender,Age,Height, family_history_with_overweight, FAF,MTRANS,FAVC,CAEC, NCP,NObeyesdad))
final_data=subset(obesity,select=-Weight)
#splitting into train and test
final_data$random_var <- runif(nrow(final_data))  # Generate a random variable
train <- final_data[final_data$random_var <= 0.8, ]  # 80% for training
test <- final_data[final_data$random_var > 0.8, ]   # 20% for testing
train<-subset(train,select=-c(random_var))
test<-subset(test,select=-c(random_var))
rf1<-randomForest(NObeyesdad~.,train,importance=TRUE)
importance(rf1)
varImpPlot(rf1,sort=TRUE, main="Importance of feature variables in random forest", pch=16)
p1<-rf1$predicted
confusionMatrix(p1,train$NObeyesdad)
p2<-predict(rf1,test)
confusionMatrix(p2,test$NObeyesdad)
gbm_obesity<-gbm(NObeyesdad~., data=train,distribution="multinomial",n.trees = 5000,
interaction.depth = 5,
shrinkage = 0.1,
cv.folds = 10,  # 10-fold cross-validation
verbose = FALSE)
perf_gbm1=gbm.perf(gbm_obesity, method="cv")
summary(gbm_obesity,plotit=TRUE)
title ('Influence of different features in boosting method')
pred_probs <- predict(gbm_obesity, newdata = train, n.trees = perf_gbm1, type = "response")
pred_class <- apply(pred_probs, 1, function(x) colnames(pred_probs)[which.max(x)])
pred_class <- factor(pred_class, levels = levels(train$NObeyesdad))
true_class <- factor(train$NObeyesdad)
confusionMatrix(pred_class,true_class)
pred_probs_test<-predict(gbm_obesity,newdata=test,n.trees=perf_gbm1, type="response")
pred_class_test<-apply(pred_probs_test,1,function(x) colnames(pred_probs_test)[which.max(x)])
pred_class_test<-factor(pred_class_test, levels=levels(test$NObeyesdad))
true_class_test<-factor(test$NObeyesdad)
confusionMatrix(pred_class_test,true_class_test)
cm<-confusionMatrix(pred_class_test,true_class_test)
cm<-confusionMatrix(pred_class_test,true_class_test)
cm$table
levelplot(cm$table,xlab = "Actual",
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
})
rgb.palette <- colorRampPalette(c("orange", "yellow"), space = "lab")
rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("black","purple4","peachpuff"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
})
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("black","purple4","pink"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
})
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("blue","purple4","pink"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
})
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","purple4","pink"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
})
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","seagreen","yellow"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
})
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","seagreen","magenta"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
})
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
})
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.7), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.7), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting (Multi-Class)",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
p2<-predict(rf1,test)
cm_rf=confusionMatrix(p2,test$NObeyesdad)
levelplot(cm_rf$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Random Forest",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Gradient Boosting",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
cm<-confusionMatrix(pred_class_test,true_class_test,mode = "prec_recall")
cm$table
cm<-confusionMatrix(pred_class_test,true_class_test,mode = "prec_recall")
cm$table
cm
p2<-predict(rf1,test)
cm_rf=confusionMatrix(p2,test$NObeyesdad, mode=prec_recall)
p2<-predict(rf1,test)
cm_rf=confusionMatrix(p2,test$NObeyesdad, mode="prec_recall")
levelplot(cm_rf$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Random Forest",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
p2<-predict(rf1,test)
cm_rf=confusionMatrix(p2,test$NObeyesdad, mode="prec_recall")
cm_rf
levelplot(cm_rf$table,xlab = "Actual", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Predicted",
main = "Confusion Matrix - Random Forest",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
levelplot(cm_rf$table,xlab = "Predicted", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Actual",
main = "Confusion Matrix - Random Forest",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Predicted", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Actual",
main = "Confusion Matrix - Gradient Boosting",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
summary(gbm_obesity,plotit=TRUE)
title ('Influence of different features in boosting method')
summary(gbm_obesity)
final_data=subset(obesity, select = c(Gender,Age,Height, family_history_with_overweight, FAF,MTRANS,FAVC,CAEC, NCP,NObeyesdad))
#final_data=subset(obesity,select=-Weight)
#splitting into train and test
final_data$random_var <- runif(nrow(final_data))  # Generate a random variable
train <- final_data[final_data$random_var <= 0.8, ]  # 80% for training
test <- final_data[final_data$random_var > 0.8, ]   # 20% for testing
train<-subset(train,select=-c(random_var))
test<-subset(test,select=-c(random_var))
rf1<-randomForest(NObeyesdad~.,train,importance=TRUE)
importance(rf1)
varImpPlot(rf1,sort=TRUE, main="Importance of feature variables in random forest", pch=16)
p1<-rf1$predicted
confusionMatrix(p1,train$NObeyesdad)
final_data=subset(obesity, select = c(Gender,Age, family_history_with_overweight, FAF,MTRANS,FAVC,CAEC, NCP,NObeyesdad))
#final_data=subset(obesity,select=-Weight)
#splitting into train and test
final_data$random_var <- runif(nrow(final_data))  # Generate a random variable
train <- final_data[final_data$random_var <= 0.8, ]  # 80% for training
test <- final_data[final_data$random_var > 0.8, ]   # 20% for testing
train<-subset(train,select=-c(random_var))
test<-subset(test,select=-c(random_var))
rf1<-randomForest(NObeyesdad~.,train,importance=TRUE)
importance(rf1)
varImpPlot(rf1,sort=TRUE, main="Importance of feature variables in random forest", pch=16)
p1<-rf1$predicted
confusionMatrix(p1,train$NObeyesdad)
p2<-predict(rf1,test)
cm_rf=confusionMatrix(p2,test$NObeyesdad, mode="prec_recall")
cm_rf
levelplot(cm_rf$table,xlab = "Predicted", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Actual",
main = "Confusion Matrix - Random Forest",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
gbm_obesity<-gbm(NObeyesdad~., data=train,distribution="multinomial",n.trees = 5000,
interaction.depth = 5,
shrinkage = 0.1,
cv.folds = 10,  # 10-fold cross-validation
verbose = FALSE)
perf_gbm1=gbm.perf(gbm_obesity, method="cv")
summary(gbm_obesity,plotit=TRUE)
title ('Influence of different features in boosting method')
summary(gbm_obesity,plotit=TRUE)
title ('Influence of different features in boosting method')
pred_probs <- predict(gbm_obesity, newdata = train, n.trees = perf_gbm1, type = "response")
pred_class <- apply(pred_probs, 1, function(x) colnames(pred_probs)[which.max(x)])
pred_class <- factor(pred_class, levels = levels(train$NObeyesdad))
true_class <- factor(train$NObeyesdad)
confusionMatrix(pred_class,true_class)
pred_probs_test<-predict(gbm_obesity,newdata=test,n.trees=perf_gbm1, type="response")
pred_class_test<-apply(pred_probs_test,1,function(x) colnames(pred_probs_test)[which.max(x)])
pred_class_test<-factor(pred_class_test, levels=levels(test$NObeyesdad))
true_class_test<-factor(test$NObeyesdad)
cm<-confusionMatrix(pred_class_test,true_class_test)
cm<-confusionMatrix(pred_class_test,true_class_test,mode = "prec_recall")
cm$table
cm
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Predicted", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Actual",
main = "Confusion Matrix - Gradient Boosting",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
#final_data=subset(obesity, select = c(Gender,Age, family_history_with_overweight, FAF,MTRANS,FAVC,CAEC, NCP,NObeyesdad))
final_data=subset(obesity,select=-c(Weight,Height))
#splitting into train and test
final_data$random_var <- runif(nrow(final_data))  # Generate a random variable
train <- final_data[final_data$random_var <= 0.8, ]  # 80% for training
test <- final_data[final_data$random_var > 0.8, ]   # 20% for testing
train<-subset(train,select=-c(random_var))
test<-subset(test,select=-c(random_var))
rf1<-randomForest(NObeyesdad~.,train,importance=TRUE)
importance(rf1)
varImpPlot(rf1,sort=TRUE, main="Importance of feature variables in random forest", pch=16)
p1<-rf1$predicted
confusionMatrix(p1,train$NObeyesdad)
p2<-predict(rf1,test)
cm_rf=confusionMatrix(p2,test$NObeyesdad, mode="prec_recall")
cm_rf
levelplot(cm_rf$table,xlab = "Predicted", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Actual",
main = "Confusion Matrix - Random Forest",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
levelplot(cm_rf$table,xlab = "Predicted", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Actual",
main = "Confusion Matrix - Random Forest",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
gbm_obesity<-gbm(NObeyesdad~., data=train,distribution="multinomial",n.trees = 5000,
interaction.depth = 5,
shrinkage = 0.1,
cv.folds = 10,  # 10-fold cross-validation
verbose = FALSE)
perf_gbm1=gbm.perf(gbm_obesity, method="cv")
p2<-predict(rf1,test)
cm_rf=confusionMatrix(p2,test$NObeyesdad, mode="prec_recall")
cm_rf
pred_probs <- predict(gbm_obesity, newdata = train, n.trees = perf_gbm1, type = "response")
pred_class <- apply(pred_probs, 1, function(x) colnames(pred_probs)[which.max(x)])
pred_class <- factor(pred_class, levels = levels(train$NObeyesdad))
true_class <- factor(train$NObeyesdad)
confusionMatrix(pred_class,true_class)
pred_probs_test<-predict(gbm_obesity,newdata=test,n.trees=perf_gbm1, type="response")
pred_class_test<-apply(pred_probs_test,1,function(x) colnames(pred_probs_test)[which.max(x)])
pred_class_test<-factor(pred_class_test, levels=levels(test$NObeyesdad))
true_class_test<-factor(test$NObeyesdad)
cm<-confusionMatrix(pred_class_test,true_class_test)
cm<-confusionMatrix(pred_class_test,true_class_test,mode = "prec_recall")
cm$table
cm
#rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
levelplot(cm$table,xlab = "Predicted", col.regions= colorRampPalette(c("lightblue","purple","magenta"))(100),
ylab = "Actual",
main = "Confusion Matrix - Gradient Boosting",
panel = function(x, y, z, ...) {
panel.levelplot(x, y, z, ...)
panel.text(x, y, labels = round(z), cex = 1.2, col="white")
},
scales = list(x = list(rot = 45)),
par.settings = list(
axis.text = list(cex = 0.7),     # Shrink tick labels
par.main.text = list(cex = 1),   # Title size (optional)
par.xlab.text = list(cex = 0.9), # x-axis label
par.ylab.text = list(cex = 0.9)  # y-axis label
))
ggplot(obesity, aes_string(x=obesity$FCVC,fill=obesity$NObeyesdad)) +
geom_bar(position="fill") +
scale_fill_brewer(palette="Set2") +
labs(fill="Obesity Level",title="Relationship between vegetable intake in meals and obesity",x="vegetables intake in meals", y="Obesity Levels") +
scale_x_discrete(labels=c("1"="Never","2"="Sometimes","3"="Always")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
